{"version":3,"sources":["App.js","components/Button/index.js","components/Table/index.js","components/Search/index.js","serviceWorker.js","index.js"],"names":["Component","Button","_this$props","this","props","onClick","_this$props$className","className","children","react_default","a","createElement","type","SORTS","NONE","list","TITLE","sortBy","AUTHOR","COMMENTS","reverse","POINTS","Table","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","sortKey","isSortReverse","onSort","bind","assertThisInitialized","setState","onDismiss","_this$state","sortedList","reverseSortedList","style","width","Table_Sort","activeSortKey","map","item","key","objectID","href","url","title","author","num_comments","points","components_Button","Sort","_ref","sortClass","classNames","button-active","Search","input","focus","value","onChange","onSubmit","ref","node","DEFAULT_QUERY","App","_isMounted","result","searchKey","searchTerm","error","isLoading","needsToSearchTopStories","setSearchTopStories","fetchSearchTopStories","onSearchChange","onSearchSubmit","results","_this2","page","arguments","length","undefined","axios","concat","then","data","catch","hits","prevState","oldHits","updatedHits","toConsumableArray","objectSpread","defineProperty","event","target","preventDefault","id","_results$searchKey","filter","_this3","_this$state2","components_Search","components_Table","ButtonWithLoading","Loading","index_es","icon","faCoffee","rest","objectWithoutProperties","App_Loading","Boolean","window","location","hostname","match","library","add","faGhost","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8b95648f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nimport PropTypes from 'prop-types';\nimport './App.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCoffee } from '@fortawesome/free-solid-svg-icons'\nimport classNames from 'classnames';\nimport Table from './components/Table';\nimport Search from './components/Search';\nimport Button from './components/Button';\n\nconst DEFAULT_QUERY = 'Redux';\nconst DEFAULT_HPP = '100';\nconst PATH_BASE = 'https://hn.algolia.com/api/v1';;\nconst PATH_SEARCH = '/search';\nconst PARAM_SEARCH = 'query=';\nconst PARAM_PAGE = 'page=';\nconst PARAM_HPP = 'hitsPerPage=';\n\nconst list = [\n  {\n    title: 'React',\n    url: 'https://facebook.github.io/react/',\n    author: 'Jordan Walke',\n    num_comments: 3,\n    points: 4,\n    objectID: 0,\n  },\n  {\n    title: 'Redux',\n    url: 'https://github.com/reactjs/redux',\n    author: 'Dan Abramov, Andrew Clark',\n    num_comments: 2,\n    points: 5,\n    objectID: 1,\n  },\n];\n\n\nclass App extends Component {\n  _isMounted = false;\n  constructor(props) {\n    super(props);\n    this.state = {\n      result: null,\n      searchKey: '',\n      searchTerm: DEFAULT_QUERY,\n      error: null,\n      isLoading: false,\n      sortKey: 'NONE',\n      isSortReverse: false,\n    };\n    this.needsToSearchTopStories = this.needsToSearchTopStories.bind(this);\n    this.setSearchTopStories = this.setSearchTopStories.bind(this);\n    this.fetchSearchTopStories = this.fetchSearchTopStories.bind(this);\n    this.onSearchChange = this.onSearchChange.bind(this);\n    this.onSearchSubmit = this.onSearchSubmit.bind(this);\n    this.onDismiss = this.onDismiss.bind(this);\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n    const { searchTerm } = this.state;\n    this.setState({ searchKey: searchTerm });\n    this.fetchSearchTopStories(searchTerm);\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  needsToSearchTopStories(searchTerm) {\n    return !this.state.results[searchTerm];\n  }\n\n  fetchSearchTopStories(searchTerm, page = 0) {\n    this.setState({ isLoading: true });\n    axios(`${PATH_BASE}${PATH_SEARCH}?${PARAM_SEARCH}${searchTerm}&${PARAM_PAGE}${page}&${PARAM_HPP}${DEFAULT_HPP}`)\n      .then(result => {\n        this._isMounted && this.setSearchTopStories(result.data);\n        this.setState({\n          isLoading: false,\n        })\n      })\n      .catch(error => this._isMounted && this.setState({ error }));\n  }\n\n  setSearchTopStories(result) {\n    const { hits, page } = result;\n    this.setState(prevState => {\n      const { searchKey, results } = prevState;\n      const oldHits = results && results[searchKey]\n        ? results[searchKey].hits : [];\n      const updatedHits = [\n        ...oldHits,\n        ...hits\n      ];\n\n      return {\n        results: {\n          ...results,\n          [searchKey]: { hits: updatedHits, page }\n        },\n        isLoading: false\n      }\n    })\n  }\n  \n\n  onSearchChange(event) {\n    this.setState({ searchTerm: event.target.value });\n  }\n\n  onSearchSubmit(event) {\n    const { searchTerm } = this.state;\n    this.setState({ searchKey: searchTerm });\n    if (this.needsToSearchTopStories(searchTerm)) {\n      this.fetchSearchTopStories(searchTerm);\n    }\n    this.fetchSearchTopStories(searchTerm);\n    event.preventDefault();\n  }\n\n  onDismiss(id) {\n    const { searchKey, results } = this.state;\n    const { hits, page } = results[searchKey];\n    const isNotId = item => item.objectID !== id;\n    const updatedHits = hits.filter(isNotId);\n    this.setState({\n      results: {...results, [searchKey]: {hits: updatedHits, page}}\n    });\n  }\n\n  render() {\n    const { \n      searchTerm,\n      results, \n      searchKey, \n      error,\n      isLoading,\n      sortKey,\n      isSortReverse\n    } = this.state;\n\n    const page = (\n      results &&\n      results[searchKey] &&\n      results[searchKey].page\n    ) || 0;\n\n    const list = (\n      results &&\n      results[searchKey] &&\n      results[searchKey].hits) || [];\n    \n    return (\n      <div className=\"page\">\n        <div className=\"interactions\">\n          <Search\n            value={searchTerm}\n            onChange={this.onSearchChange}\n            onSubmit={this.onSearchSubmit}\n          >Search</Search>\n        </div>\n        {error\n          ? <div className=\"interactions\">\n            <p>Something went wrong.</p>\n          </div>\n          : <Table\n            list={list}\n            sortKey={sortKey}\n            isSortReverse={isSortReverse}\n            onSort={this.onSort}\n            onDismiss={this.onDismiss}\n          />\n        }\n        <div className=\"interactions\">\n        <ButtonWithLoading isLoading={isLoading} onClick={() => this.fetchSearchTopStories(searchKey, page + 1)}>\n          More\n        </ButtonWithLoading>\n        </div>\n      </div>\n    );\n  }\n\n}\n\n\nconst Loading = () => \n  <div><FontAwesomeIcon icon={faCoffee} /></div>\n\n\nconst withLoading = (Component) => ({ isLoading, ...rest}) =>\n  isLoading\n    ? <Loading />\n    : <Component {...rest} />\nconst ButtonWithLoading = withLoading(Button);\n\nexport default App;\n","import React, { Component } from 'react';\n\nclass Button extends Component {\n  render() {\n    const {\n      onClick,\n      className = '',\n      children,\n    } = this.props;\n    return (\n      <button\n        onClick={onClick}\n        className={className}\n        type=\"button\"\n      >\n        {children}\n      </button>\n    );\n  }\n}\n\nexport default Button;\n","import React, { Component } from 'react';\nimport Button from '../Button';\nimport classNames from 'classnames';\nimport { sortBy } from 'lodash';\n\nconst SORTS = {\n  NONE: list => list,\n  TITLE: list => sortBy(list, 'title'),\n  AUTHOR: list => sortBy(list, 'author'),\n  COMMENTS: list => sortBy(list, 'num_comments').reverse(),\n  POINTS: list => sortBy(list, 'points').reverse(),\n};\n\n\nclass Table extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      sortKey: 'NONE',\n      isSortReverse: false,\n    }\n    this.onSort = this.onSort.bind(this);\n  }\n\n  onSort(sortKey) {\n    const isSortReverse = this.state.sortKey === sortKey && !this.state.isSortReverse;\n    this.setState({ sortKey, isSortReverse });\n  }\n\n  render() {\n    const { list, onDismiss } = this.props;\n    const { sortKey, isSortReverse } = this.state;\n    const sortedList = SORTS[sortKey](list);\n    const reverseSortedList = isSortReverse\n    ? sortedList.reverse()\n    : sortedList;\n    return (\n      <div className=\"table\">\n      <div className=\"table-header\">\n        <span style={{ width: '40%' }}>\n          <Sort\n            sortKey={'TITLE'}\n            onSort={this.onSort}\n            activeSortKey={sortKey}\n          >\n            Title\n        </Sort>\n        </span>\n        <span style={{ width: '30%' }}>\n          <Sort\n            sortKey={'AUTHOR'}\n            onSort={this.onSort}\n            activeSortKey={sortKey}\n          >\n            Author\n        </Sort>\n        </span>\n        <span style={{ width: '10%' }}>\n          <Sort\n            sortKey={'COMMENTS'}\n            onSort={this.onSort}\n            activeSortKey={sortKey}\n          >\n            Comments\n        </Sort>\n        </span>\n        <span style={{ width: '10%' }}>\n          <Sort\n            sortKey={'POINTS'}\n            onSort={this.onSort}\n            activeSortKey={sortKey}\n          >\n            Points\n          </Sort>\n        </span>\n        <span style={{ width: '10%' }}>\n          Archive\n      </span>\n      </div>\n      {reverseSortedList.map(item =>\n        <div key={item.objectID} className=\"table-row\">\n          <span>\n            <a href={item.url}>{item.title}</a>\n          </span>\n          <span>{item.author}</span>\n          <span>{item.num_comments}</span>\n          <span>{item.points}</span>\n          <span>\n            <Button onClick={() => onDismiss(item.objectID)} className=\"button-inline\">\n              Dismiss\n            </Button>\n          </span>\n        </div>\n      )}\n      </div>\n    )\n  }\n}\n\n\n\nconst Sort = ({ sortKey, activeSortKey, onSort, children }) => {\n  const sortClass =classNames('button-inline', { 'button-active': sortKey === activeSortKey })\n  return (<Button onClick={() => onSort(sortKey)} className={sortClass}>\n    {children}\n  </Button>)\n}\n\n  export default Table;\n\n","import React, { Component } from 'react';\n\nclass Search extends Component {\n  componentDidMount() {\n    if(this.input) {\n      this.input.focus();\n    }\n  }\n\n  render() {\n    const {\n      value,\n      onChange,\n      onSubmit,\n      children,\n    } = this.props;\n\n    let input;\n    return (\n      <form onSubmit={onSubmit}>\n        <input\n          type=\"text\"\n          value={value}\n          onChange={onChange}\n          ref={(node) => input = node}\n        />\n        <button type=\"submit\">\n          {children}\n        </button>\n      </form>\n    )\n  }\n}\n\n  export default Search;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faGhost } from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(faGhost)\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\nif (module.hot) {\n  module.hot.accept();\n}"],"sourceRoot":""}